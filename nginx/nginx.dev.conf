events {
    worker_connections 1024;
}

http {
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;
    
    # Hide nginx version
    server_tokens off;
    
    # Log format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    upstream frontend {
        server frontend:80;
    }

    upstream oauth-service {
        server oauth-service:3002;
    }

    upstream mcp-gateway {
        server mcp-gateway:3001;
    }

    # Combined server block for testing (HTTP only)
    server {
        listen 80;
        server_name localhost api.localhost;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;

        # OAuth endpoints
        location /oauth {
            proxy_pass http://oauth-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto http;
        }

        # API endpoints (OAuth service)
        location /api/oauth/ {
            proxy_pass http://oauth-service/oauth/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto http;
        }
        
        location /api/ {
            proxy_pass http://oauth-service/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto http;
        }

        # MCP API endpoints
        location /api/mcp/ {
            proxy_pass http://mcp-gateway/api/mcp/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto http;
        }

        # MCP Gateway endpoints
        location /mcp {
            proxy_pass http://mcp-gateway;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto http;
            
            # WebSocket support for MCP
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_read_timeout 86400;
        }

        location /services {
            proxy_pass http://mcp-gateway/services;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto http;
        }

        # Health checks
        location = /health/oauth {
            proxy_pass http://oauth-service/health;
            proxy_set_header Host $host;
        }

        location = /health/gateway {
            proxy_pass http://mcp-gateway/health;
            proxy_set_header Host $host;
        }

        location = /health {
            return 200 '{"status":"ok","services":["oauth","gateway"]}';
            add_header Content-Type application/json;
        }

        # Frontend (default)
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto http;
        }
    }
}