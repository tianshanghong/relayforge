events {
    worker_connections 1024;
}

http {
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;
    
    # Hide nginx version
    server_tokens off;
    
    # Trust Cloudflare IPs for real IP resolution
    # IPv4
    set_real_ip_from 173.245.48.0/20;
    set_real_ip_from 103.21.244.0/22;
    set_real_ip_from 103.22.200.0/22;
    set_real_ip_from 103.31.4.0/22;
    set_real_ip_from 141.101.64.0/18;
    set_real_ip_from 108.162.192.0/18;
    set_real_ip_from 190.93.240.0/20;
    set_real_ip_from 188.114.96.0/20;
    set_real_ip_from 197.234.240.0/22;
    set_real_ip_from 198.41.128.0/17;
    set_real_ip_from 162.158.0.0/15;
    set_real_ip_from 104.16.0.0/13;
    set_real_ip_from 104.24.0.0/14;
    set_real_ip_from 172.64.0.0/13;
    set_real_ip_from 131.0.72.0/22;
    
    # IPv6
    set_real_ip_from 2400:cb00::/32;
    set_real_ip_from 2606:4700::/32;
    set_real_ip_from 2803:f800::/32;
    set_real_ip_from 2405:b500::/32;
    set_real_ip_from 2405:8100::/32;
    set_real_ip_from 2a06:98c0::/29;
    set_real_ip_from 2c0f:f248::/32;
    real_ip_header CF-Connecting-IP;

    # Rate limiting zones (conservative for security)
    limit_req_zone $binary_remote_addr zone=api:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=oauth:10m rate=2r/s;
    
    # Log format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    upstream frontend {
        server frontend:80;
    }

    upstream oauth-service {
        server oauth-service:3002;
    }

    upstream mcp-gateway {
        server mcp-gateway:3001;
    }

    # Redirect HTTP to HTTPS
    server {
        listen 80;
        server_name ${DOMAIN_NAME} www.${DOMAIN_NAME} api.${DOMAIN_NAME};
        return 301 https://$server_name$request_uri;
    }

    # Main site (HTTPS)
    server {
        listen 443 ssl;
        http2 on;
        server_name ${DOMAIN_NAME} www.${DOMAIN_NAME};

        ssl_certificate /etc/nginx/ssl/cloudflare-origin.pem;
        ssl_certificate_key /etc/nginx/ssl/cloudflare-origin-key.pem;

        # SSL configuration for Cloudflare
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
        }
    }

    # API subdomain (HTTPS)
    server {
        listen 443 ssl;
        http2 on;
        server_name api.${DOMAIN_NAME};

        ssl_certificate /etc/nginx/ssl/cloudflare-origin.pem;
        ssl_certificate_key /etc/nginx/ssl/cloudflare-origin-key.pem;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # Security headers
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        location /oauth {
            limit_req zone=oauth burst=5 nodelay;
            
            proxy_pass http://oauth-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
        }

        # API endpoints (OAuth service)
        location /api {
            limit_req zone=api burst=10 nodelay;
            
            proxy_pass http://oauth-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
        }

        # MCP Gateway endpoints
        location /mcp {
            limit_req zone=api burst=10 nodelay;
            
            proxy_pass http://mcp-gateway;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            
            # WebSocket support for MCP
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_read_timeout 86400;
        }

        location /services {
            proxy_pass http://mcp-gateway/services;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
        }

        # Health checks
        location = /health/oauth {
            proxy_pass http://oauth-service/health;
            proxy_set_header Host $host;
        }

        location = /health/gateway {
            proxy_pass http://mcp-gateway/health;
            proxy_set_header Host $host;
        }

        location = /health {
            return 200 '{"status":"ok","services":["oauth","gateway"]}';
            add_header Content-Type application/json;
        }

        location / {
            return 404;
        }
    }

}